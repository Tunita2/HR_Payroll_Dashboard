import React, { useState, useEffect } from 'react';
import '../../styles/EmployeeStyles/Notifications.css';

// Mock data for notifications
const mockNotifications = [
    {
        id: 1,
        type: 'payroll',
        title: 'L∆∞∆°ng th√°ng 5 ƒë√£ ƒë∆∞·ª£c chuy·ªÉn',
        message: 'L∆∞∆°ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n ng√¢n h√†ng.',
        timestamp: new Date(2023, 4, 25, 9, 30),
        read: false
    },
    {
        id: 2,
        type: 'leave',
        title: 'ƒê∆°n ngh·ªâ ph√©p ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát',
        message: 'ƒê∆°n xin ngh·ªâ ph√©p t·ª´ ng√†y 10/06 ƒë·∫øn 15/06 ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát.',
        timestamp: new Date(2023, 5, 5, 14, 15),
        read: true
    },
    {
        id: 3,
        type: 'task',
        title: 'Nhi·ªám v·ª• m·ªõi ƒë∆∞·ª£c giao',
        message: 'B·∫°n c√≥ m·ªôt nhi·ªám v·ª• m·ªõi: "Ho√†n th√†nh b√°o c√°o qu√Ω 2".',
        timestamp: new Date(2023, 5, 10, 11, 0),
        read: false
    },
    {
        id: 4,
        type: 'payroll',
        title: 'Th√¥ng b√°o th∆∞·ªüng',
        message: 'B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c kho·∫£n th∆∞·ªüng th√†nh t√≠ch xu·∫•t s·∫Øc.',
        timestamp: new Date(2023, 5, 15, 16, 45),
        read: false
    },
    {
        id: 5,
        type: 'task',
        title: 'Nh·∫Øc nh·ªü deadline',
        message: 'Deadline d·ª± √°n Marketing s·∫Ω k·∫øt th√∫c v√†o ng√†y mai.',
        timestamp: new Date(2023, 5, 18, 8, 0),
        read: true
    },
];

const Notifications = () => {
    const [notifications, setNotifications] = useState([]);
    const [filter, setFilter] = useState('all');
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        // Simulate API call to fetch notifications
        const fetchNotifications = async () => {
            setLoading(true);
            // In a real app, this would be an API call
            setTimeout(() => {
                setNotifications(mockNotifications);
                setLoading(false);
            }, 800);
        };

        fetchNotifications();
    }, []);

    const handleTabChange = (newValue) => {
        setFilter(newValue);
    };

    const handleMarkAsRead = (id) => {
        setNotifications(notifications.map(notification =>
            notification.id === id ? { ...notification, read: true } : notification
        ));
    };

    const handleDeleteNotification = (id) => {
        setNotifications(notifications.filter(notification => notification.id !== id));
    };

    const handleMarkAllAsRead = () => {
        setNotifications(notifications.map(notification => ({ ...notification, read: true })));
    };

    const handleClearAll = () => {
        setNotifications([]);
    };

    const filteredNotifications = filter === 'all'
        ? notifications
        : filter === 'unread'
            ? notifications.filter(notification => !notification.read)
            : notifications.filter(notification => notification.type === filter);

    const unreadCount = notifications.filter(notification => !notification.read).length;

    const getNotificationIcon = (type) => {
        switch (type) {
            case 'payroll':
                return 'üí∞';
            case 'leave':
                return 'üìÖ';
            case 'task':
                return 'üìã';
            default:
                return 'üîî';
        }
    };

    const formatDate = (date) => {
        return date.toLocaleDateString('vi-VN');
    };

    const formatTime = (date) => {
        return date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
    };

    const getTimeAgo = (timestamp) => {
        const now = new Date();
        const diffInMinutes = Math.floor((now - timestamp) / (1000 * 60));

        if (diffInMinutes < 60) {
            return `${diffInMinutes} ph√∫t tr∆∞·ªõc`;
        } else if (diffInMinutes < 1440) {
            return `${Math.floor(diffInMinutes / 60)} gi·ªù tr∆∞·ªõc`;
        } else {
            return formatDate(timestamp);
        }
    };

    return (
        <div className="notifications-wrapper">
            <div className="notifications-container">
                <div className="notifications-header">
                    <div className="notifications-title">
                        <div className="icon-container">
                            <span className="notifications-icon">üîî</span>
                            {unreadCount > 0 && <span className="badge">{unreadCount}</span>}
                        </div>
                        <h1>Th√¥ng b√°o</h1>
                    </div>
                    <div className="notifications-actions">
                        <button
                            className="btn btn-primary"
                            onClick={handleMarkAllAsRead}
                            disabled={unreadCount === 0}
                        >
                            <span className="btn-icon">‚úì</span>
                            <span className="btn-text">ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc</span>
                        </button>
                        <button
                            className="btn btn-danger"
                            onClick={handleClearAll}
                            disabled={notifications.length === 0}
                        >
                            <span className="btn-icon">üóëÔ∏è</span>
                            <span className="btn-text">X√≥a t·∫•t c·∫£</span>
                        </button>
                    </div>
                </div>

                <div className="notifications-tabs">
                    <button
                        className={`tab-btn ${filter === 'all' ? 'active' : ''}`}
                        onClick={() => handleTabChange('all')}
                    >
                        <span className="tab-icon">üìã</span>
                        <span className="tab-text">T·∫•t c·∫£</span>
                    </button>
                    <button
                        className={`tab-btn ${filter === 'unread' ? 'active' : ''}`}
                        onClick={() => handleTabChange('unread')}
                    >
                        <span className="tab-icon">üì¨</span>
                        <span className="tab-text">Ch∆∞a ƒë·ªçc</span>
                        {unreadCount > 0 && <span className="badge-small">{unreadCount}</span>}
                    </button>
                    <button
                        className={`tab-btn ${filter === 'payroll' ? 'active' : ''}`}
                        onClick={() => handleTabChange('payroll')}
                    >
                        <span className="tab-icon">üí∞</span>
                        <span className="tab-text">L∆∞∆°ng & Th∆∞·ªüng</span>
                    </button>
                    <button
                        className={`tab-btn ${filter === 'leave' ? 'active' : ''}`}
                        onClick={() => handleTabChange('leave')}
                    >
                        <span className="tab-icon">üìÖ</span>
                        <span className="tab-text">Ngh·ªâ ph√©p</span>
                    </button>
                    <button
                        className={`tab-btn ${filter === 'task' ? 'active' : ''}`}
                        onClick={() => handleTabChange('task')}
                    >
                        <span className="tab-icon">üìã</span>
                        <span className="tab-text">Nhi·ªám v·ª•</span>
                    </button>
                </div>

                <div className="notifications-content">
                    {loading ? (
                        <div className="notifications-loading">
                            <div className="loading-spinner"></div>
                            <p>ƒêang t·∫£i thÔøΩÔøΩng b√°o...</p>
                        </div>
                    ) : filteredNotifications.length === 0 ? (
                        <div className="notifications-empty">
                            <div className="empty-icon">üì≠</div>
                            <p>Kh√¥ng c√≥ th√¥ng b√°o n√†o</p>
                        </div>
                    ) : (
                        <div className="notifications-list">
                            {filteredNotifications.map((notification) => (
                                <div
                                    key={notification.id}
                                    className={`notification-item ${!notification.read ? 'unread' : ''}`}
                                >
                                    <div className="notification-icon">
                                        {getNotificationIcon(notification.type)}
                                    </div>
                                    <div className="notification-content">
                                        <div className="notification-header">
                                            <h3 className="notification-title">{notification.title}</h3>
                                            {!notification.read && <span className="new-badge">M·ªõi</span>}
                                        </div>
                                        <p className="notification-message">{notification.message}</p>
                                        <div className="notification-time">
                                            <span className="time-item"><span className="time-icon">üìÖ</span> {formatDate(notification.timestamp)}</span>
                                            <span className="time-item"><span className="time-icon">‚è∞</span> {formatTime(notification.timestamp)}</span>
                                            <span className="time-ago">({getTimeAgo(notification.timestamp)})</span>
                                        </div>
                                    </div>
                                    <div className="notification-actions">
                                        {!notification.read && (
                                            <button
                                                className="action-btn read-btn"
                                                onClick={() => handleMarkAsRead(notification.id)}
                                                title="ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc"
                                            >
                                                ‚úì
                                            </button>
                                        )}
                                        <button
                                            className="action-btn delete-btn"
                                            onClick={() => handleDeleteNotification(notification.id)}
                                            title="X√≥a"
                                        >
                                            ‚úï
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default Notifications;